{"version":3,"sources":["../src/js/EventDispatcher.js","../src/js/Point.js","../src/js/DragDropContainer.js"],"names":["DDC","EventDispatcher","this","events","prototype","registerEvent","eventName","trigger","args","_i","arguments","length","hasOwnProperty","i","apply","Array","slice","call","on","callback","push","off","unsubscribe","list","index","indexOf","console","log","splice","Point","x","y","__extends","d","b","__","constructor","p","Object","create","__droppables","DragDropContainer","_super","parent","container","createjs","Container","addChild","draggable","enableDraggable","disableDraggable","droppable","enableDroppable","disableDroppable","that","startOffset","lastDroppable","downEvent","dEvent","target","isDraggable","stageX","stageY","setChildIndex","getNumChildren","eventResult","moveEvent","mEvent","point","getDroppableUnderPoint","upEvent","uEvent","overEvent","oEvent","getDroppableContainerUnderPoint","droppables","getObjectsUnderPoint","id","oldIndex","getChildIndex","newIndex","getDroppableFromContainer","droppableContainer"],"mappings":"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","file":"ddcontainer.min.js","sourcesContent":["var DDC;\n(function (DDC) {\n    var EventDispatcher = (function () {\n        function EventDispatcher() {\n            this.events = [];\n        }\n        /**\n         * Registers a new event for subscriptions\n         *\n         * @param {string} eventName The event name\n         */\n        EventDispatcher.prototype.registerEvent = function (eventName) {\n            this.events[eventName] = [];\n        };\n        /**\n         * Calls all subscriptions of a specific event\n         *\n         * @param {string} eventName The eventName\n         * @param {mixed}  [arg0]    The first argument to pass to the subscribing functions\n         * @param {mixed}  [arg1]    The second argument to pass to the subscribing functions\n         * @param {mixed}  [arg2]    ...\n         */\n        EventDispatcher.prototype.trigger = function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (this.events.hasOwnProperty(eventName))\n                for (var i = 0; i < this.events[eventName].length; ++i)\n                    this.events[eventName][i].apply(this, Array.prototype.slice.call(arguments, 1));\n        };\n        /**\n         * Subscribes to an droppable event\n         *\n         * @param {string}   eventName The event name (hit, over or out)\n         * @param {Function} callback  The function\n         *\n         * @returns {Function} The callback function to use for unsubscribing\n         */\n        EventDispatcher.prototype.on = function (eventName, callback) {\n            // Remove the callback\n            if (this.events.hasOwnProperty(eventName))\n                this.events[eventName].push(callback);\n            return callback;\n        };\n        /**\n         * Unsubscribes from a droppable event\n         *\n         * @param {string}   eventName The event name (hit, over or out)\n         * @param {Function} callback     The function\n         */\n        EventDispatcher.prototype.off = function (eventName, callback) {\n            // Unsubscribes an event from a subscription list\n            function unsubscribe(list, callback) {\n                var index = list.indexOf(callback);\n                if (index !== -1) {\n                    console.log('Event found');\n                    list.splice(index, 1);\n                }\n                else {\n                    console.log('Event not found:', list, callback);\n                }\n            }\n            // Remove the callback\n            if (this.events.hasOwnProperty(eventName))\n                unsubscribe(this.events[eventName], callback);\n            console.log('Events after off:', this.events[eventName]);\n        };\n        return EventDispatcher;\n    })();\n    DDC.EventDispatcher = EventDispatcher;\n})(DDC || (DDC = {}));\n","var DDC;\n(function (DDC) {\n    var Point = (function () {\n        /**\n         * Creates a point with x and y coordinates\n         *\n         * @param {number} public x The x coordinate\n         * @param {number} public y The y coordinate\n         */\n        function Point(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        return Point;\n    })();\n    DDC.Point = Point;\n})(DDC || (DDC = {}));\n","/// <reference path=\"EventDispatcher.ts\"/>\n/// <reference path=\"Point.ts\"/>\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DDC;\n(function (DDC) {\n    /** @type {DragDropContainer[]} Holds all droppables **/\n    var __droppables = [];\n    var DragDropContainer = (function (_super) {\n        __extends(DragDropContainer, _super);\n        /**\n         * Creates a new DragDropContainer with both functions disabled.\n         * To be able to check for drops the containers must have the same parent.\n         * Note: The drop events will be triggered at the droppable containers\n         *       whereas the drag events will be triggered at the draggables.\n         *\n         * @param {Container} parent The parent container where this container should be added to.\n         */\n        function DragDropContainer(parent) {\n            _super.call(this);\n            this.container = new createjs.Container();\n            // Register the possible events\n            this.registerEvent('startdragging');\n            this.registerEvent('stopdragging');\n            this.registerEvent('dragging');\n            this.registerEvent('overdroppable');\n            this.registerEvent('outdroppable');\n            this.registerEvent('hitdroppable');\n            // Add the container to it's parent\n            this.parent = parent;\n            this.parent.addChild(this.container);\n        }\n        /**\n         * Makes the container draggable or undraggable.\n         *\n         * @param {boolean = true} draggable If the container should be draggable or not.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.draggable = function (draggable) {\n            if (draggable === void 0) { draggable = true; }\n            if (draggable) {\n                return this.enableDraggable();\n            }\n            return this.disableDraggable();\n        };\n        /**\n         * Makes the container droppable or undroppable.\n         *\n         * @param {boolean = true} droppable If the container should be droppable or not.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.droppable = function (droppable) {\n            if (droppable === void 0) { droppable = true; }\n            if (droppable) {\n                return this.enableDroppable();\n            }\n            return this.disableDroppable();\n        };\n        /**\n         * Enables draggable for the container.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.enableDraggable = function () {\n            var that = this;\n            var startOffset = new DDC.Point(0, 0);\n            var lastDroppable = null;\n            // When the draggable container is clicked\n            this.downEvent = this.container.on('mousedown', function (dEvent) {\n                // Prevent dragging on undraggables\n                if (dEvent.target.hasOwnProperty('isDraggable') && dEvent.target.isDraggable == false)\n                    return;\n                // Store the offset on the draggable (where the click was on the container on the begining)\n                startOffset.x = dEvent.stageX - this.x;\n                startOffset.y = dEvent.stageY - this.y;\n                // Move the draggable to the front of the display object list\n                that.parent.setChildIndex(that.container, that.parent.getNumChildren() - 1);\n                // Init the result object with empty droppable\n                var eventResult = { draggable: that };\n                eventResult.draggable = that;\n                // Call the startdragging callbacks\n                that.trigger('startdragging', eventResult);\n                // Start track the move event\n                that.moveEvent = that.container.on('pressmove', function (mEvent) {\n                    // Move the container with the mouse/touch\n                    that.container.x = mEvent.stageX - startOffset.x;\n                    that.container.y = mEvent.stageY - startOffset.y;\n                    // Check all droppables for over\n                    var point = new DDC.Point(mEvent.stageX, mEvent.stageY);\n                    eventResult.droppable = that.getDroppableUnderPoint(point);\n                    // Call the dragging callbacks\n                    that.trigger('dragging', eventResult);\n                    // Skip the over call if this droppable was the lastDroppable\n                    if (lastDroppable === eventResult.droppable)\n                        return;\n                    // Call over droppable if such exists\n                    if (eventResult.droppable !== null) {\n                        eventResult.droppable.trigger('overdroppable', eventResult);\n                        // If lastDroppable was null it will be set now\n                        if (lastDroppable === null) {\n                            lastDroppable = eventResult.droppable;\n                        }\n                        else {\n                            // The lastDroppable must have been another one (see check above)\n                            // Therefore the outdroppable will be triggered on the last one\n                            lastDroppable.trigger('outdroppable', eventResult);\n                            lastDroppable = eventResult.droppable;\n                        }\n                    }\n                    else if (lastDroppable !== null) {\n                        // The lastDroppable has no more hit as it seems\n                        lastDroppable.trigger('outdroppable', eventResult);\n                        lastDroppable = null;\n                    }\n                });\n                // And start track the up event\n                that.upEvent = that.container.on('pressup', function (uEvent) {\n                    // Check all droppables for hit\n                    var point = new DDC.Point(uEvent.stageX, uEvent.stageY);\n                    eventResult.droppable = that.getDroppableUnderPoint(point);\n                    // Call the startdragging callbacks\n                    that.trigger('stopdragging', eventResult);\n                    // Unbind move and up events\n                    that.container.off('pressmove', that.moveEvent);\n                    that.container.off('pressup', that.moveEvent);\n                    // Call hit droppable if such exists\n                    if (eventResult.droppable !== null)\n                        eventResult.droppable.trigger('hitdroppable', eventResult);\n                });\n            });\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Disables dragging for the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.disableDraggable = function () {\n            // Remove eventListener\n            this.container.off('mousedown', this.downEvent);\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Enables droppable on the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.enableDroppable = function () {\n            var that = this;\n            // Bind a mouse event so that it will be detected with getObjectsUnderPoint()\n            this.overEvent = this.container.on('mouseover', function (oEvent) {\n                //console.log('Over:', that);\n            });\n            // Add the droppable to __droppables\n            __droppables.push(this);\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Disables droppable on the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.disableDroppable = function () {\n            // Remove eventListener\n            this.container.off('mouseover', this.overEvent);\n            // Remove it from __droppables\n            var index = __droppables.indexOf(this);\n            if (index > -1)\n                __droppables.splice(index, 1);\n            // Return this to allow chaining\n            return this;\n        };\n        /*******************************************************/\n        /** Some helper functions to find the right droppable **/\n        /*******************************************************/\n        /**\n         * Checks all droppables for a hit with the draggable.\n         *\n         * @param {Point} point The point.\n         */\n        DragDropContainer.prototype.getDroppableContainerUnderPoint = function (point) {\n            var droppables = this.parent.getObjectsUnderPoint(point.x, point.y, 2);\n            var droppable = null;\n            // Check all droppables under the point\n            for (var i = 0; i < droppables.length; ++i) {\n                // Skip the draggable itself\n                if (droppables[i].parent && droppables[i].parent.id === this.container.id)\n                    continue;\n                // Set this as droppable if it has a higher z-index\n                var oldIndex = droppable ? this.parent.getChildIndex(droppable) : -1;\n                var newIndex = this.parent.getChildIndex(droppables[i].parent);\n                if (newIndex > oldIndex)\n                    droppable = droppables[i].parent;\n            }\n            return droppable;\n        };\n        /**\n         * Returns the DragDropContainer that belongs to a easeljs container.\n         *\n         * @param  {Container}            container The container.\n         *\n         * @return {DragDropContainer}              The corresponding DragDropContainer if such exists.\n         */\n        DragDropContainer.prototype.getDroppableFromContainer = function (container) {\n            for (var i = 0; i < __droppables.length; ++i)\n                if (__droppables[i].container.id === container.id)\n                    return __droppables[i];\n            return null;\n        };\n        /**\n         * Returns the DragDropContainer under a point\n         *\n         * @param  {Point}             point The mouse point of the draggable.\n         *\n         * @return {DragDropContainer}       The DragDropContainer under it.\n         */\n        DragDropContainer.prototype.getDroppableUnderPoint = function (point) {\n            var droppableContainer = this.getDroppableContainerUnderPoint(point);\n            if (droppableContainer === null)\n                return null;\n            return this.getDroppableFromContainer(droppableContainer);\n        };\n        return DragDropContainer;\n    })(DDC.EventDispatcher);\n    DDC.DragDropContainer = DragDropContainer;\n})(DDC || (DDC = {}));\n"]}