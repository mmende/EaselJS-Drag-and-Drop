{"version":3,"sources":["../src/js/EventDispatcher.js","../src/js/Point.js","../src/js/DragDropContainer.js"],"names":["DDC","EventDispatcher","this","events","prototype","registerEvent","eventName","trigger","args","_i","arguments","length","hasOwnProperty","i","apply","Array","slice","call","on","callback","push","off","unsubscribe","list","index","indexOf","console","log","splice","Point","x","y","__extends","d","b","__","constructor","p","Object","create","__droppables","DragDropContainer","_super","parent","reference","container","createjs","Container","addChild","draggable","enableDraggable","disableDraggable","droppable","enableDroppable","disableDroppable","removeChild","lastDroppable","that","startOffset","downEvent","dEvent","target","isDraggable","stageX","stageY","setChildIndex","getNumChildren","eventResult","point","globalToLocal","getDroppableUnderPoint","moveEvent","mEvent","lastEventResult","upEvent","uEvent","overEvent","oEvent","__droppable","searchAncestryForDroppable","element","currentElement","getDroppableContainerUnderPoint","droppables","getObjectsUnderPoint","oldIndex","possibleDroppable","newIndex","getChildIndex","getDroppableFromContainer","id","droppableContainer"],"mappings":"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","file":"ddcontainer.min.js","sourcesContent":["var DDC;\n(function (DDC) {\n    var EventDispatcher = (function () {\n        function EventDispatcher() {\n            this.events = [];\n        }\n        /**\n         * Registers a new event for subscriptions\n         *\n         * @param {string} eventName The event name\n         */\n        EventDispatcher.prototype.registerEvent = function (eventName) {\n            this.events[eventName] = [];\n        };\n        /**\n         * Calls all subscriptions of a specific event\n         *\n         * @param {string} eventName The eventName\n         * @param {mixed}  [arg0]    The first argument to pass to the subscribing functions\n         * @param {mixed}  [arg1]    The second argument to pass to the subscribing functions\n         * @param {mixed}  [arg2]    ...\n         */\n        EventDispatcher.prototype.trigger = function (eventName) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            if (this.events.hasOwnProperty(eventName))\n                for (var i = 0; i < this.events[eventName].length; ++i)\n                    this.events[eventName][i].apply(this, Array.prototype.slice.call(arguments, 1));\n        };\n        /**\n         * Subscribes to an droppable event\n         *\n         * @param {string}   eventName The event name (hit, over or out)\n         * @param {Function} callback  The function\n         *\n         * @returns {Function} The callback function to use for unsubscribing\n         */\n        EventDispatcher.prototype.on = function (eventName, callback) {\n            // Remove the callback\n            if (this.events.hasOwnProperty(eventName))\n                this.events[eventName].push(callback);\n            return callback;\n        };\n        /**\n         * Unsubscribes from a droppable event\n         *\n         * @param {string}   eventName The event name (hit, over or out)\n         * @param {Function} callback     The function\n         */\n        EventDispatcher.prototype.off = function (eventName, callback) {\n            // Unsubscribes an event from a subscription list\n            function unsubscribe(list, callback) {\n                var index = list.indexOf(callback);\n                if (index !== -1) {\n                    console.log('Event found');\n                    list.splice(index, 1);\n                }\n                else {\n                    console.log('Event not found:', list, callback);\n                }\n            }\n            // Remove the callback\n            if (this.events.hasOwnProperty(eventName))\n                unsubscribe(this.events[eventName], callback);\n            console.log('Events after off:', this.events[eventName]);\n        };\n        return EventDispatcher;\n    })();\n    DDC.EventDispatcher = EventDispatcher;\n})(DDC || (DDC = {}));\n","var DDC;\n(function (DDC) {\n    var Point = (function () {\n        /**\n         * Creates a point with x and y coordinates\n         *\n         * @param {number} public x The x coordinate\n         * @param {number} public y The y coordinate\n         */\n        function Point(x, y) {\n            this.x = x;\n            this.y = y;\n        }\n        return Point;\n    })();\n    DDC.Point = Point;\n})(DDC || (DDC = {}));\n","/// <reference path=\"EventDispatcher.ts\"/>\n/// <reference path=\"Point.ts\"/>\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar DDC;\n(function (DDC) {\n    /** @type {DragDropContainer[]} Holds all droppables **/\n    var __droppables = [];\n    var DragDropContainer = (function (_super) {\n        __extends(DragDropContainer, _super);\n        /**\n         * Creates a new DragDropContainer with both functions disabled.\n         * To be able to check for drops the containers must have the same parent.\n         * Note: The drop events will be triggered at the droppable containers\n         *       whereas the drag events will be triggered at the draggables.\n         *\n         * @param {Container} parent    The parent container where this container should be added to.\n         * @param {any}       reference A reference object that can be used to identify the DragDropContainer.\n         */\n        function DragDropContainer(parent, reference) {\n            _super.call(this);\n            this.container = new createjs.Container();\n            this.reference = reference;\n            // Register the possible events\n            this.registerEvent('startdragging');\n            this.registerEvent('stopdragging');\n            this.registerEvent('dragging');\n            this.registerEvent('overdroppable');\n            this.registerEvent('outdroppable');\n            this.registerEvent('hitdroppable');\n            // Add the container to it's parent\n            this.parent = parent;\n            this.parent.addChild(this.container);\n        }\n        /**\n         * Makes the container draggable or undraggable.\n         *\n         * @param {boolean = true} draggable If the container should be draggable or not.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.draggable = function (draggable) {\n            if (draggable === void 0) { draggable = true; }\n            if (draggable) {\n                return this.enableDraggable();\n            }\n            return this.disableDraggable();\n        };\n        /**\n         * Makes the container droppable or undroppable.\n         *\n         * @param {boolean = true} droppable If the container should be droppable or not.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.droppable = function (droppable) {\n            if (droppable === void 0) { droppable = true; }\n            if (droppable) {\n                return this.enableDroppable();\n            }\n            return this.disableDroppable();\n        };\n        /**\n         * Unbinds all events and removes the group from the parent\n         */\n        DragDropContainer.prototype.delete = function () {\n            this.draggable(false).droppable(false);\n            this.parent.removeChild(this.container);\n        };\n        /**\n         * Enables draggable for the container.\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.enableDraggable = function () {\n            var that = this;\n            var startOffset = new DDC.Point(0, 0);\n            var lastDroppable;\n            // When the draggable container is clicked\n            this.downEvent = this.container.on('mousedown', function (dEvent) {\n                // Reset lastDroppable\n                lastDroppable = null;\n                // Prevent dragging on undraggables\n                if (dEvent.target.hasOwnProperty('isDraggable') && dEvent.target.isDraggable == false)\n                    return;\n                // Store the offset on the draggable (where the click was on the container on the begining)\n                startOffset.x = dEvent.stageX - this.x;\n                startOffset.y = dEvent.stageY - this.y;\n                // Move the draggable to the front of the display object list\n                that.parent.setChildIndex(that.container, that.parent.getNumChildren() - 1);\n                // Init the result object with empty droppable\n                var eventResult = { draggable: that };\n                eventResult.draggable = that;\n                // Check if there is a initial droppable underlying\n                //var point: Point = new Point(dEvent.stageX, dEvent.stageY);\n                var point = that.parent.globalToLocal(dEvent.stageX, dEvent.stageY);\n                eventResult.droppable = that.getDroppableUnderPoint(point);\n                if (eventResult.droppable !== null) {\n                    eventResult.droppable.trigger('overdroppable', eventResult);\n                    lastDroppable = eventResult.droppable;\n                }\n                // Call the startdragging callbacks\n                that.trigger('startdragging', eventResult);\n                // Start track the move event\n                that.moveEvent = that.container.on('pressmove', function (mEvent) {\n                    // Move the container with the mouse/touch\n                    that.container.x = mEvent.stageX - startOffset.x;\n                    that.container.y = mEvent.stageY - startOffset.y;\n                    // Check all droppables for over\n                    //var point: Point = new Point(mEvent.stageX, mEvent.stageY);\n                    var point = that.parent.globalToLocal(mEvent.stageX, mEvent.stageY);\n                    eventResult.droppable = that.getDroppableUnderPoint(point);\n                    // Call the dragging callbacks\n                    that.trigger('dragging', eventResult);\n                    // Skip the over call if this droppable was the lastDroppable\n                    if (lastDroppable === eventResult.droppable)\n                        return;\n                    // Call over droppable if such exists\n                    if (eventResult.droppable !== null) {\n                        eventResult.droppable.trigger('overdroppable', eventResult);\n                        // If lastDroppable was null it will be set now\n                        if (lastDroppable === null) {\n                            lastDroppable = eventResult.droppable;\n                        }\n                        else {\n                            // The lastDroppable must have been another one (see check above)\n                            // Therefore the outdroppable will be triggered on the last one\n                            // Another DragDropResult with lastDroppable as droppable must be sent therefore\n                            var lastEventResult = { draggable: eventResult.draggable, droppable: lastDroppable };\n                            lastDroppable.trigger('outdroppable', lastEventResult);\n                            lastDroppable = eventResult.droppable;\n                        }\n                    }\n                    else if (lastDroppable !== null) {\n                        // The lastDroppable has no more hit as it seems\n                        // Another DragDropResult with lastDroppable as droppable must be sent therefore\n                        var lastEventResult = { draggable: eventResult.draggable, droppable: lastDroppable };\n                        lastDroppable.trigger('outdroppable', lastEventResult);\n                        lastDroppable = null;\n                    }\n                });\n                // And start track the up event\n                that.upEvent = that.container.on('pressup', function (uEvent) {\n                    // Check all droppables for hit\n                    //var point: Point = new Point(uEvent.stageX, uEvent.stageY);\n                    var point = that.parent.globalToLocal(uEvent.stageX, uEvent.stageY);\n                    eventResult.droppable = that.getDroppableUnderPoint(point);\n                    // Call the startdragging callbacks\n                    that.trigger('stopdragging', eventResult);\n                    // Unbind move and up events\n                    that.container.off('pressmove', that.moveEvent);\n                    that.container.off('pressup', that.upEvent);\n                    // Call hit droppable if such exists\n                    if (eventResult.droppable !== null)\n                        eventResult.droppable.trigger('hitdroppable', eventResult);\n                });\n            });\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Disables dragging for the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.disableDraggable = function () {\n            // Remove eventListener\n            this.container.off('mousedown', this.downEvent);\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Enables droppable on the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.enableDroppable = function () {\n            var that = this;\n            // Bind a mouse event so that it will be detected with getObjectsUnderPoint()\n            this.overEvent = this.container.on('mouseover', function (oEvent) {\n                //console.log('Over:', that);\n            });\n            // Also add a property __droppable so that the DisplayObject can be identified as droppable\n            this.container.__droppable = true;\n            // Add the droppable to __droppables\n            __droppables.push(this);\n            // Return this to allow chaining\n            return this;\n        };\n        /**\n         * Disables droppable on the container\n         *\n         * @returns {DragDropContainer} Returns the instance the method is called on (useful for chaining calls.)\n         */\n        DragDropContainer.prototype.disableDroppable = function () {\n            // Remove eventListener\n            this.container.off('mouseover', this.overEvent);\n            // Remove the __droppable property\n            if (this.container.hasOwnProperty('__droppable'))\n                delete this.container.__droppable;\n            // Remove it from __droppables\n            var index = __droppables.indexOf(this);\n            if (index > -1)\n                __droppables.splice(index, 1);\n            // Return this to allow chaining\n            return this;\n        };\n        /*******************************************************/\n        /** Some helper functions to find the right droppable **/\n        /*******************************************************/\n        /**\n         * Searches the ancestry of an element for the __droppable property and returns the closes container with this property if such exists.\n         *\n         * @param  {DisplayObject} element The DisplayObject to check.\n         *\n         * @return {any}                   A Container with the __droppable property or null if no such exists.\n         */\n        DragDropContainer.prototype.searchAncestryForDroppable = function (element) {\n            var droppable = null;\n            var currentElement = element;\n            while (true) {\n                // Skip the draggable itself\n                if (currentElement === this.container)\n                    return null;\n                // Check if currentElement has the __droppable property\n                if (currentElement.hasOwnProperty('__droppable') && currentElement.__droppable === true) {\n                    droppable = currentElement;\n                    break;\n                }\n                // Check if the element has a parent that is not the draggable parent\n                if (currentElement.hasOwnProperty('parent') &&\n                    currentElement.parent !== null &&\n                    currentElement.parent !== this.parent) {\n                    // Set the parent as the new currentElement\n                    currentElement = currentElement.parent;\n                }\n                else {\n                    // The top was reached\n                    break;\n                }\n            }\n            return droppable;\n        };\n        /**\n         * Checks all droppables for a hit with the draggable.\n         *\n         * @param {Point} point The point.\n         */\n        DragDropContainer.prototype.getDroppableContainerUnderPoint = function (point) {\n            var droppables = this.parent.getObjectsUnderPoint(point.x, point.y, 2);\n            var droppable = null;\n            // Check all droppables under the point\n            var oldIndex = -1;\n            for (var i = 0; i < droppables.length; ++i) {\n                // Get the closest droppable to droppables[i] that is not the draggable itself\n                var possibleDroppable = this.searchAncestryForDroppable(droppables[i]);\n                if (possibleDroppable === null)\n                    continue;\n                // Compare the index of the found droppable with the current highest matched droppable\n                var newIndex = this.parent.getChildIndex(possibleDroppable);\n                if (newIndex > oldIndex) {\n                    droppable = possibleDroppable;\n                    oldIndex = newIndex;\n                }\n            }\n            return droppable;\n        };\n        /**\n         * Returns the DragDropContainer that belongs to a easeljs container.\n         *\n         * @param  {Container}            container The container.\n         *\n         * @return {DragDropContainer}              The corresponding DragDropContainer if such exists.\n         */\n        DragDropContainer.prototype.getDroppableFromContainer = function (container) {\n            for (var i = 0; i < __droppables.length; ++i)\n                if (__droppables[i].container.id === container.id)\n                    return __droppables[i];\n            return null;\n        };\n        /**\n         * Returns the DragDropContainer under a point\n         *\n         * @param  {Point}             point The mouse point of the draggable.\n         *\n         * @return {DragDropContainer}       The DragDropContainer under it.\n         */\n        DragDropContainer.prototype.getDroppableUnderPoint = function (point) {\n            var droppableContainer = this.getDroppableContainerUnderPoint(point);\n            if (droppableContainer === null)\n                return null;\n            return this.getDroppableFromContainer(droppableContainer);\n        };\n        return DragDropContainer;\n    })(DDC.EventDispatcher);\n    DDC.DragDropContainer = DragDropContainer;\n})(DDC || (DDC = {}));\n"]}